name: Memory Check

on:
  # tests must run for a PR to be valid and pass merge queue muster
  # on main, we want to know that all commits are passing at a glance, any deviation should help bisecting errors
  # the merge run checks should show on master and enable this clear test/passing history
  merge_group:
    branches: [main]
  pull_request:
    branches: ["*"]


jobs:
  memory-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y heaptrack
  
      - name: Install Rust
        id: toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - uses: Swatinem/rust-cache@v1
        continue-on-error: true
        with:
          cache-on-failure: true
          sharedKey: ${{github.run_id}}

      - name: install ripgrep ubuntu
        run: sudo apt-get install ripgrep

      - name: Build sn bins
        run: cargo build --release --bins 
        timeout-minutes: 30

      - name: Build churn tests 
        run: cargo test --release -p sn_node --no-run
        timeout-minutes: 30

      - name: Start a local network
        run: cargo run --release --bin testnet --features verify-nodes -- --interval 2000 --node-path ./target/release/safenode
        id: section-startup
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Set contact env var node.
        shell: bash
        # get all nodes listen ports
        run: echo "SAFE_PEERS=$(rg "listening on \".+\"" ~/.safe -u | rg '/ip4.*$' -m1 -o | rg '"' -r '')" >> "$GITHUB_ENV"

      - name: Check contact peer
        shell: bash
        run: echo "Peer is $SAFE_PEERS"

      # Start a heaptracked node instance to compare memory usage
      - name: Start safenode with heaptrack
        run: |
          mkdir -p ~/.safe/heapnode
          heaptrack ./target/release/safenode --root-dir ~/.safe/heapnode --log-dir ~/.safe/heapnode &
          sleep 10

      # The resources file we upload may change, and with it mem consumption.
      # Be aware!
      - name: Start a client to upload files
        run: |
          ls -l ./target/release
          cargo run --bin safe --release -- files upload -- "./target/release/faucet"
          cargo run --bin safe --release -- files upload -- "./target/release/safe"
          cargo run --bin safe --release -- files upload -- "./target/release/safenode"
          cargo run --bin safe --release -- files upload -- "./target/release/testnet"
        id: client-file-upload
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Chunks data integrity during nodes churn (during 10min)
        run: cargo test --release -p sn_node --test data_with_churn -- --nocapture 
        env:
          CHUNKS_ONLY: true
          TEST_DURATION_MINS: 10
          SN_LOG: "all"
        timeout-minutes: 30

      - name: Verify restart of nodes using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of restarts
        # TODO: make this use an env var, or relate to testnet size
        run : |
          restart_count=$(rg "Node is restarting in" ~/.safe/node/local-test-network -c --stats | rg "(\d+) matches" | rg "\d+" -o)
          echo "Restart $restart_count nodes"
          detected_dead_peer=$(rg "Detected dead peer" ~/.safe/node/local-test-network -c --stats | rg "(\d+) matches" | rg "\d+" -o)
          echo "Detected dead peer $detected_dead_peer times"
          if [ $detected_dead_peer -lt $restart_count ]; then
            echo "Detected dead peer times of: $detected_dead_peer is less than the restart count of: $restart_count"
            exit 1
          fi
          node_count=$(ls $log_dir | wc -l)
          if [ $restart_count -lt $node_count ]; then
            echo "Restart count of: $restart_count is less than the node count of: $node_count"
            exit 1
          fi
        if: always()

      - name: Verify data replication using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of replication
        # TODO: make this use an env var, or relate to testnet size
        run : |
          sending_list_count=$(rg "Sending a replication list" ~/.safe/node/local-test-network -c --stats | rg "(\d+) matches" | rg "\d+" -o)
          echo "Sent $sending_list_count replication lists"
          received_list_count=$(rg "Replicate list received from" ~/.safe/node/local-test-network -c --stats | rg "(\d+) matches" | rg "\d+" -o)
          echo "Received $received_list_count replication lists"
          fetching_attempt_count=$(rg "Fetching replication" ~/.safe/node/local-test-network -c --stats | rg "(\d+) matches" | rg "\d+" -o)
          echo "Carried out $fetching_attempt_count fetching attempts"
          replication_attempt_count=$(rg "Replicating chunk" ~/.safe/node/local-test-network -c --stats | rg "(\d+) matches" | rg "\d+" -o)
          echo "Sent $replication_attempt_count chunk copies"
          replication_count=$(rg "Chunk received for replication" ~/.safe/node/local-test-network -c --stats | rg "(\d+) matches" | rg "\d+" -o)
          echo "Received $replication_count chunk copies"
          node_count=$(ls $log_dir | wc -l)
          if [ $replication_count -lt $node_count ]; then
            echo "Replication count of: $replication_count is less than the node count of: $node_count"
            exit 1
          fi
        if: always()

      - name: Start a client to download files
        run: |
          cargo run --bin safe --release -- files download
          ls -l ~/.safe/client/downloaded_files
          downloaded_files=$(ls ~/.safe/client/downloaded_files | wc -l)
          if [ $downloaded_files -lt 4 ]; then
            echo "Only downloaded $downloaded_files files, less than the 4 files uploaded"
            exit 1
          fi
        id: client-file-download
        env:
          RUST_LOG: "safenode,safe=trace"
        timeout-minutes: 10
        if: always()

      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"
        if: always()

      - name: Check for heaptrack file
        run: ls -la

      - name: Analyze memory usage
        shell: bash
        run: |
          HEAPTRACK_FILE=$(ls -t heaptrack.safenode.*.zst | head -1)
          heaptrack --analyze $HEAPTRACK_FILE > heaptrack.safenode.txt
        if: always()
     
      - name: Check memory usage
        shell: bash
        env:
          # The resources file we upload may change, and with it mem consumption.
          # This is set to a value high enough to allow for some variation depending on 
          # resources and node locatin in the network, but hopefully low enough to catch 
          # any wild memory issues 
          # Any changes to this value should be carefully considered and tested!
          MEM_LIMIT_MB: "35" # mb
        run: |
          MEMORY_USAGE=$(rg "peak heap memory consumption" ./heaptrack.safenode.txt | awk '{print $5}' | rg "M" -r "")
          echo "Memory usage: $MEMORY_USAGE MB"
          if (( $(echo "$MEMORY_USAGE > $MEM_LIMIT_MB" | bc -l) )); then
            echo "Memory usage exceeded threshold: $MEMORY_USAGE MB"
            exit 1
          fi
        if: always()

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: |
          find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf nodes_log_files.tar.gz --files-from -
          find /tmp/safe-client -iname '*.log*' | tar -zcvf client_log_files.tar.gz --files-from -
          find . -iname '*log_files.tar.gz' | tar -zcvf log_files.tar.gz --files-from -
        if: failure()


      - name: Upload Heaptrack
        uses: actions/upload-artifact@main
        with:
          name: heaptrack_safenode
          path: heaptrack.safenode.*
        continue-on-error: true
        if: always()

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_node_logs_memcheck
          path: log_files.tar.gz
        if: failure()
        continue-on-error: true

